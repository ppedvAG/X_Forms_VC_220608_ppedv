<?xml version="1.0" encoding="utf-8" ?>
<!--vgl. CodeBehind-->

<!--Jede XAML-Datei hat eine Root-Element, welcher die Art der UI bestimmt. Dieses muss mit der Mutterklasse im CodeBehind übereinstimmen-->
<!--Im Root-Element werden die in diesem Dokument benutzten Namespaces definiert, sowie der Verweis auf die anhängige Klasse (CodeBehind)-->
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:local="clr-namespace:X_Forms"
             x:Class="X_Forms.Hauptseite">

    <!--Jeder Container / jede Page hat eine Resource-Property, in welcher Ressourcen (Objekte, Styles, Converter, ...) für diesen 
    Container bereit gestellt werden können.-->
    <ContentPage.Resources>
        <!--Über das Präfix (Zeichen vor dem Doppelpunkt) wird der entsprechende Namespace angesteuert-->
        <!--Jede Ressource (außer globalen Styles) benötigen einen Key, über welche diese angersteuert werden können.-->
        <x:String x:Key="BtnString">Hallo, ich bin eine Ressource</x:String>
        <!--Converter sind Klassen, welche innerhalb von Bindungen für Werte-Manipulationen sorgen (vgl. unten Abschnitt Bindings)-->
        <local:DoubleToColorConverter x:Key="double2color"/>
    </ContentPage.Resources>

    <!--Ein ScrollView ermöglicht dem User das Scrollen-->
    <ScrollView>

        <!--Properties können direkt im einleitenden Tag mittels der Attribute gesetzt werden.-->
        <!--Vertical und HorizontalOptions definieren das Anzeige-Verhalten des UI-Elements in Bezug auf umgebende Objekte.-->
        <!--Padding definiert einen Abstand des UI-Elements zu inneren Elementen.-->
        <!--Container, welche die Children-Property besitzen können mehrere Elemente beinhalten-->
        <StackLayout x:Name="Stl_Main"
                 HorizontalOptions="FillAndExpand"
                 VerticalOptions="FillAndExpand"
                 Orientation="Vertical"
                 BackgroundColor="LightBlue"
                 Padding="10, 20, 30, 40">

            <StackLayout.Resources>
                <!--Existiert derselbe Ressourcen-Key in verschiedenen Resource-Properties, gilt jener, welcher 'näher drann' liegt-->
                <x:String x:Key="BtnString">Ciao, ich bin eine Ressource</x:String>
            </StackLayout.Resources>

            <!--Label sind Controls zur Ausgabe von Strings-->
            <!--Einfache Property-Belegungen werden in Attribut-Form direkt in den Start-Tag geschrieben-->
            <Label x:Name="Lbl_Output"
               HorizontalOptions="Center"
               FontSize="{StaticResource GlobalFontSize}"
               FontAttributes="Bold"
               TextColor="Red"
               Margin="10">

                <!--Alternativ können Eigenschaften 'ausgelagert' werden, z.B. um sie mit komplexen Objekten zu befüllen-->
                <Label.Text>
                    Hallo, ich bin ein String
                </Label.Text>
            </Label>

            <!--Buttons sind Controls, welche der User zum Auslösen von bestimmten Logiken benutzen kann-->
            <!--In XAML definierte Events benötigen einen EventHandler im CodeBehind (vgl. CodeBehind)-->
            <!--Mittels einer StaticResource-Bindung kann auf in übergeordneten Container definierte Ressourcen zugegriffen werden-->
            <Button x:Name="Btn_KlickMich"
                Clicked="Btn_KlickMich_Clicked"
                Text="{StaticResource BtnString}"
                BorderWidth="2"
                BorderColor="Green"/>

            <!--ImageButtons sind Buttons mit grafischem Inhalt-->
            <!--Grafische Ressourcen müssen in den einzelnen OS-Projekten abgelegt sein (z.B. Android/Resources/drawable)-->
            <ImageButton x:Name="IBtn_Beispiel"
                     Source="test.png"
                     BackgroundColor="Transparent"
                     HeightRequest="50"
                     Clicked="Btn_KlickMich_Clicked"/>

            <!--Entries sind Controls zur User-Eingabe von Strings-->
            <!--Die Placeholder-Property des Entries wird im Textfeld angezeigt, solange der Benutzer noch keinen Eintrag getätigt hat-->
            <!--Die Keyboard-Property definiert das angezeigte Eingabefeld-->
            <Entry x:Name="Ent_Input"
               Placeholder="Gib einen String ein"
               Keyboard="Text"
               Completed="Ent_Input_Completed"/>

            <!--Slider und Stepper sind Controls zur User-Maipulation von numerischen Werten-->
            <Slider Minimum="0"
                Maximum="100"
                Value="50"
                x:Name="Sdr_Wert"
                ValueChanged="Sdr_Wert_ValueChanged"/>
            <Stepper/>

            <DatePicker Format="dd.MM.yyyy"/>

            <Picker x:Name="Pkr_Namen">
                <Picker.Items>
                    <x:String>Hugo</x:String>
                    <x:String>Anna</x:String>
                    <x:String>Jürgen</x:String>
                    <x:String>Maria</x:String>
                </Picker.Items>
            </Picker>

            <StackLayout x:Name="Sly_Styles">
                <!--Dieser Button nimmt den globalen Button-Style an (vgl. ResourceDict.xaml)-->
                <Button Text="Globaler Style"/>
                <!--Dieser Button nimmt einen expliziten Button-Style an (vgl. RessourceDict.xaml)-->
                <Button Text="Spezifischer Style"
                    Style="{StaticResource Btn_Style}"
                    BackgroundColor="LightGreen"
                    Clicked="Button_Clicked"/>
            </StackLayout>

            <!--Bindungen-->
            <StackLayout x:Name="Sly_Binding"
                     Orientation="Horizontal">

                <!--Mittels Bindungen können Properties von UI-Elementen miteinander verknüpft werden.-->
                <Slider x:Name="Sdr_Binding" 
                    Minimum="0" 
                    Maximum="255"
                    WidthRequest="250"/>
                <!--Mittels einer Markup-Extension ({}-Klammern) kann eine Property an eine andere Property gebunden werden. Die Property,
                welche die Markup-Extension beinhaltet, gilt als Target-Property-->
                <Label x:Name="Lbl_Binding" 
                   Text="{Binding Source={x:Reference Sdr_Binding}, Path=Value, Mode=TwoWay}"/>
                <BoxView HeightRequest="50"
                     WidthRequest="50"
                     BackgroundColor="{Binding Source={x:Reference Sdr_Binding}, Path=Value, ConverterParameter=150, Converter={StaticResource double2color}}"/>

            </StackLayout>

            <StackLayout x:Name="Sly_DataBinding" Orientation="Vertical">

                <StackLayout.BindingContext>
                    <local:Person Name="Rainer Zufall" Alter="35"/>
                </StackLayout.BindingContext>

                <StackLayout.Children>
                    <StackLayout Orientation="Horizontal">
                        <Entry Text="{Binding Path=Name}"
                       WidthRequest="150"/>
                        <Label Text="{Binding Alter, StringFormat=({0})}"/>
                        <Button Text="Show" x:Name="Btn_Show" Clicked="Btn_Show_Clicked"/>
                        <Button Text="Altern" x:Name="Btn_Altern" Clicked="Btn_Altern_Clicked"/>
                    </StackLayout>

                    <Label Text="{Binding WichtigeTage[0].Year}"/>

                    <ListView ItemsSource="{Binding WichtigeTage}" HeightRequest="100"
                          x:Name="LstV_WichtigeTage">
                        <ListView.ItemTemplate>
                            <DataTemplate>
                                <ViewCell>
                                    <StackLayout Orientation="Horizontal">
                                        <Label Text="{Binding Day}"/>
                                        <Label Text="{Binding Month}"/>
                                        <Label Text="{Binding Year}"/>
                                        <Button Text="Löschen" x:Name="Btn_Delete_02" Clicked="Btn_Delete_02_Clicked"
                                            CommandParameter="{Binding}"/>
                                    </StackLayout>
                                    <ViewCell.ContextActions>
                                        <MenuItem Text="Löschen" Clicked="Btn_Delete_02_Clicked" CommandParameter="{Binding}"/>
                                    </ViewCell.ContextActions>
                                </ViewCell>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>
                    <Button Text="Neuer wichtiger Tag" x:Name="Btn_Add" Clicked="Btn_Add_Clicked"/>
                    <Button Text="Lösche markierten Eintrag" x:Name="Btn_Delete" Clicked="Btn_Delete_Clicked"/>
                </StackLayout.Children>

            </StackLayout>

        </StackLayout>

    </ScrollView>
</ContentPage>
